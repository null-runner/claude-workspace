#!/bin/bash
# Claude Exit Safe - Graceful exit con terminazione sicura
# Versione più sicura che non forza kill del processo

set -euo pipefail  # Strict error handling

# Environment validation  
WORKSPACE_DIR="${WORKSPACE_DIR:-$HOME/claude-workspace}"

# Source error handling library
if [[ -f "$WORKSPACE_DIR/scripts/error-handling-library.sh" ]]; then
    source "$WORKSPACE_DIR/scripts/error-handling-library.sh"
else
    echo "ERROR: error-handling-library.sh not found" >&2
    exit 3
fi

# Setup cleanup trap
cleanup_cexit_safe() {
    error_log "INFO" "Claude Exit Safe cleanup called"
}
setup_cleanup_trap cleanup_cexit_safe

# Validate environment
validate_environment "HOME" "WORKSPACE_DIR" || exit $?

echo -e "${SUCCESS_GREEN}🪝 Claude Exit Safe - avvio graceful exit...${NC}"
echo ""

# Change to workspace directory safely
if ! safe_cd "$WORKSPACE_DIR" "workspace directory"; then
    error_log "ERROR" "Cannot access workspace directory: $WORKSPACE_DIR"
    echo -e "${ERROR_RED}❌ Errore: impossibile accedere a $WORKSPACE_DIR${NC}"
    echo -e "${WARNING_YELLOW}💡 Exit non sicuro - terminazione${NC}"
    exit 1
fi

# Execute smart exit with proper error handling
smart_exit_script="$WORKSPACE_DIR/scripts/claude-smart-exit.sh"
if ! validate_file "$smart_exit_script" "smart exit script" true; then
    error_log "ERROR" "Smart-exit script not found"
    echo -e "${ERROR_RED}❌ Smart-exit script non trovato${NC}"
    echo -e "${WARNING_YELLOW}💡 Skip smart exit - continuo cleanup${NC}"
else
    # Execute smart exit with timeout
    echo -e "${INFO_BLUE}🚀 Executing smart exit...${NC}"
    if ! safe_execute_script "$smart_exit_script" "smart exit" 120 --auto; then
        error_log "WARN" "Smart exit had issues but continuing cleanup"
        echo -e "${WARNING_YELLOW}⚠️  Smart exit had issues but continuing cleanup${NC}"
    fi
fi

# Graceful exit completato
echo -e "${GREEN}✅ Graceful exit completato!${NC}"

# CLEANUP: Termina smart-sync daemon se attivo (anche con cexit-safe)
echo -e "${CYAN}🧹 Cleaning up smart-sync daemon...${NC}"
SYNC_PID_FILE="$WORKSPACE_DIR/.claude/sync/smart-sync.pid"

cleanup_sync_daemon() {
    if ! validate_file "$SYNC_PID_FILE" "smart-sync PID file" false; then
        error_log "INFO" "No smart-sync daemon PID file found"
        return $EXIT_SUCCESS
    fi
    
    local sync_pid
    if ! sync_pid=$(cat "$SYNC_PID_FILE" 2>/dev/null); then
        error_log "WARN" "Failed to read PID from smart-sync PID file"
        rm -f "$SYNC_PID_FILE"
        return $EXIT_SUCCESS
    fi
    
    if [[ -z "$sync_pid" ]]; then
        error_log "INFO" "Empty PID in smart-sync PID file"
        rm -f "$SYNC_PID_FILE"
        return $EXIT_SUCCESS
    fi
    
    # Check if process is still running
    if ! kill -0 "$sync_pid" 2>/dev/null; then
        error_log "INFO" "Smart-sync daemon not running (stale PID file)"
        rm -f "$SYNC_PID_FILE"
        return $EXIT_SUCCESS
    fi
    
    echo -e "${CYAN}🛑 Stopping smart-sync daemon (PID: $sync_pid)...${NC}"
    
    # Use safe process termination
    if safe_kill_process "$sync_pid" "smart-sync" 10; then
        echo -e "${SUCCESS_GREEN}✅ Smart-sync daemon stopped safely${NC}"
        error_log "SUCCESS" "Smart-sync daemon stopped successfully"
    else
        echo -e "${ERROR_RED}❌ Failed to stop smart-sync daemon safely${NC}"
        error_log "ERROR" "Failed to stop smart-sync daemon"
    fi
    
    # Clean up PID file
    rm -f "$SYNC_PID_FILE"
    return $EXIT_SUCCESS
}

cleanup_sync_daemon

echo -e "${BLUE}💡 Ora puoi chiudere manualmente Claude Code o usare Ctrl+C${NC}"
echo -e "${YELLOW}🎯 Per exit forzato, usa: ./scripts/cexit${NC}"
echo ""
echo -e "${CYAN}📋 SUMMARY:${NC}"
echo -e "   💾 Session salvata"
echo -e "   🔄 Smart-sync eseguito"
echo -e "   📤 Repository aggiornato"
echo -e "   🧹 Daemon cleanup eseguito"
echo -e "   ✅ Workspace pulito e pronto"
echo ""

# Non esce - lascia che l'utente gestisca manualmente