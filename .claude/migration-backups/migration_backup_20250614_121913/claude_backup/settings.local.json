{
  "permissions": {
    "allow": [
      "Bash(hostname)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(chmod:*)",
      "Bash(rm:*)",
      "Bash(ssh-keygen:*)",
      "Bash(./scripts/claude-list.sh:*)",
      "Bash(bash:*)",
      "Bash(sed:*)",
      "Bash(grep:*)",
      "Bash(./scripts/claude-new.sh:*)",
      "Bash(./scripts/cleanup-sandbox.sh:*)",
      "Bash(./scripts/setup-cron.sh:*)",
      "Bash(~/claude-workspace/scripts/claude-status.sh)",
      "Bash(~/claude-workspace/scripts/claude-new.sh test-progetto:*)",
      "Bash(~/claude-workspace/scripts/claude-enable.sh)",
      "Bash(ssh-add:*)",
      "Bash(cat:*)",
      "Bash(git push:*)",
      "Bash(git remote set-url:*)",
      "Bash(ssh:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git pull:*)",
      "Bash(~/claude-workspace/scripts/laptop-quick-setup.sh)",
      "Bash(source ~/.bashrc)",
      "Bash(~/claude-workspace/scripts/claude-list.sh:*)",
      "Bash(~/claude-workspace/scripts/claude-new.sh final-test python-basic sandbox)",
      "Bash(~/claude-workspace/scripts/cleanup-sandbox.sh:*)",
      "Bash(~/claude-workspace/scripts/claude-save.sh:*)",
      "Bash(~/claude-workspace/scripts/claude-resume.sh:*)",
      "Bash(~/claude-workspace/scripts/claude-memory.sh context \"Sistema memoria Claude implementato e testato\" \"Testare su laptop\" \"Documentare funzionalitÃ \" \"Creare primo progetto reale\")",
      "Bash(./scripts/claude-memory-cleaner.sh:*)",
      "Bash(./scripts/claude-project-memory.sh:*)",
      "Bash(./scripts/claude-save.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-project-memory.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-memory-cleaner.sh stats:*)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(rg:*)",
      "Bash(tree:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-status-bar.sh:*)",
      "Bash(./scripts/status:*)",
      "Bash(./scripts/claude-enhanced-save.sh:*)",
      "Bash(./scripts/css:*)",
      "Bash(timeout:*)",
      "Bash(./scripts/ctrack:*)",
      "Bash(./scripts/ctools:*)",
      "Bash(./scripts/claude-setup-profile.sh:*)",
      "Bash(./scripts/cmetrics:*)",
      "Bash(./scripts/claude-decision-log.sh:*)",
      "Bash(./scripts/claude-learning-tracker.sh:*)",
      "Bash(./scripts/claude-context-switch.sh:*)",
      "Bash(./scripts/claude-workspace-tools.sh test:*)",
      "Bash(echo:*)",
      "Bash(./scripts/claude-smart-exit.sh:*)",
      "Bash(./scripts/claude-startup.sh:*)",
      "Bash(./scripts/claude-auto-memory.sh status:*)",
      "Bash(./scripts/claude-activity-tracker.sh:*)",
      "Bash(./scripts/claude-autonomous-system.sh status:*)",
      "Bash(./scripts/claude-autonomous-system.sh:*)",
      "Bash(./scripts/claude-simplified-memory.sh:*)",
      "Bash(./scripts/claude-autonomous-exit.sh:*)",
      "Bash(./scripts/claude-auto-project-detector.sh:*)",
      "Bash(./scripts/claude-intelligence-extractor.sh:*)",
      "Bash(export SERVICE_STATUS_FILE=\"/home/nullrunner/claude-workspace/.claude/autonomous/service-status.json\")",
      "Bash(python3:*)",
      "Bash(./scripts/sync.sh:*)",
      "Bash(./scripts/sync-now.sh:*)",
      "Bash(./scripts/auto-sync.sh status:*)",
      "Bash(time find /home/nullrunner/claude-workspace -type f -name \"*.json\" -exec ls -l {} ;)",
      "Bash(strace -c -f timeout 5s inotifywait -m -r /home/nullrunner/claude-workspace --include='\\.json$':*)",
      "Bash(./scripts/claude-atomic-sync.sh status:*)",
      "Bash(./scripts/claude-full-workspace-sync.sh status:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-smart-sync-filter.sh test:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-intelligent-auto-sync.sh test:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-smart-sync-filter.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-intelligent-auto-sync.sh status)",
      "Bash(/home/nullrunner/claude-workspace/scripts/demo-smart-filter.sh:*)",
      "Bash(./scripts/claude-atomic-sync.sh push:*)",
      "Bash(./scripts/claude-smart-sync.sh:*)",
      "Bash(git rm:*)",
      "Bash(./scripts/claude-exit-hook.sh:*)",
      "Bash(./scripts/cexit:*)",
      "Bash(env)",
      "Bash(git reset:*)",
      "Bash(git checkout:*)",
      "Bash(pgrep:*)",
      "Bash(WORKSPACE_DIR=\"$HOME/claude-workspace\" python3 -c \"\nimport os\nimport json\n\ndef detect_project():\n    try:\n        cwd = os.getcwd()\n        workspace_dir = os.environ.get('WORKSPACE_DIR')\n        print(f'CWD: {cwd}')\n        print(f'WORKSPACE_DIR: {workspace_dir}')\n        \n        if not workspace_dir or not cwd.startswith(workspace_dir):\n            print('Not in workspace or workspace_dir not set')\n            return None\n        \n        # Get relative path from workspace\n        relative_path = os.path.relpath(cwd, workspace_dir)\n        path_parts = relative_path.split(os.sep)\n        print(f'Relative path: {relative_path}')\n        print(f'Path parts: {path_parts}')\n        \n        # Check for projects/active/PROJECT_NAME pattern\n        if len(path_parts) >= 3 and path_parts[0] == 'projects' and path_parts[1] == 'active':\n            project_name = path_parts[2]\n            project_type = 'active'\n            depth = len(path_parts) - 3  # Depth inside project\n            \n            return {\n                'name': project_name,\n                'type': project_type, \n                'path': os.path.join(workspace_dir, 'projects', 'active', project_name),\n                'relative_path': '/'.join(path_parts[:3]),\n                'depth': depth,\n                'full_path': cwd\n            }\n        \n        return None\n        \n    except Exception as e:\n        print(f'Exception: {e}')\n        return None\n\nproject = detect_project()\nif project:\n    print(json.dumps(project, indent=2))\nelse:\n    print('null')\n\")",
      "Bash(WORKSPACE_DIR=\"$HOME/claude-workspace\" python3 -c \"\nimport os\nimport json\n\ndef detect_project():\n    try:\n        cwd = os.getcwd()\n        workspace_dir = os.environ.get(''WORKSPACE_DIR'')\n        print(f''CWD: {cwd}'')\n        print(f''WORKSPACE_DIR: {workspace_dir}'')\n        \n        if not workspace_dir or not cwd.startswith(workspace_dir):\n            print(''Not in workspace or workspace_dir not set'')\n            return None\n        \n        # Get relative path from workspace\n        relative_path = os.path.relpath(cwd, workspace_dir)\n        path_parts = relative_path.split(os.sep)\n        print(f''Relative path: {relative_path}'')\n        print(f''Path parts: {path_parts}'')\n        print(f''Len path_parts: {len(path_parts)}'')\n        \n        # Check for projects/active/PROJECT_NAME pattern\n        if len(path_parts) >= 3 and path_parts[0] == ''projects'' and path_parts[1] == ''active'':\n            print(''Matched active project pattern!'')\n            project_name = path_parts[2]\n            project_type = ''active''\n            depth = len(path_parts) - 3  # Depth inside project\n            \n            return {\n                ''name'': project_name,\n                ''type'': project_type, \n                ''path'': os.path.join(workspace_dir, ''projects'', ''active'', project_name),\n                ''relative_path'': ''/''.join(path_parts[:3]),\n                ''depth'': depth,\n                ''full_path'': cwd\n            }\n        \n        return None\n        \n    except Exception as e:\n        print(f''Exception: {e}'')\n        return None\n\nproject = detect_project()\nif project:\n    print(json.dumps(project, indent=2))\nelse:\n    print(''null'')\n\")",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-autonomous-system.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-auto-project-detector.sh status:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-auto-project-detector.sh:*)",
      "Bash(../scripts/claude-auto-project-detector.sh:*)",
      "Bash(scripts/claude-simplified-memory.sh:*)",
      "Bash(WORKSPACE_DIR=\"$HOME/claude-workspace\" python3 -c \"\nimport os\nimport subprocess\nimport json\n\n# Test direct project detector call\nresult = subprocess.run([\n    '/home/nullrunner/claude-workspace/scripts/claude-auto-project-detector.sh',\n    'check'\n], capture_output=True, text=True, cwd='/home/nullrunner/claude-workspace',\n   env=dict(os.environ, WORKSPACE_DIR='/home/nullrunner/claude-workspace'))\n\nprint('Return code:', result.returncode)\nprint('Stdout:', repr(result.stdout))\nprint('Stderr:', repr(result.stderr))\n\")",
      "Bash(./scripts/claude-project-lifecycle.sh:*)",
      "Bash(cexit)",
      "Bash(./scripts/claude-intelligent-auto-sync.sh status:*)",
      "Bash(./scripts/claude-project-mode.sh status:*)",
      "Bash(git config:*)",
      "Bash(./scripts/claude-log-rotator.sh:*)",
      "Bash(MEMORY_COORD_MODE=1 ./scripts/claude-simplified-memory.sh save test_fix \"Fixed safe_json_operations import issue\" 2>&1)",
      "Bash(/home/nullrunner/claude-workspace/scripts/json-safe-operations.sh test:*)",
      "Bash(./scripts/claude-sync-coordinator.sh status:*)",
      "Bash(./scripts/claude-sync-coordinator.sh:*)",
      "Bash(./scripts/claude-memory-coordinator.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/test-json-locking.sh:*)",
      "Bash(safe_json_read memory/enhanced-context.json)",
      "Bash(./scripts/claude-sync-daemon.sh:*)",
      "Bash(./scripts/test-sync-coordinator.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/json-safe-wrapper.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/json-safe-operations.sh status:*)",
      "Bash(./scripts/atomic-file-operations.sh:*)",
      "Bash(trap 'echo \"Exit hook triggered safely\"' EXIT)",
      "Bash(export CLAUDE_EXIT_HOOK_DEBUG=1)",
      "Bash(source:*)",
      "Bash(./scripts/claude-backup-cleaner.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-process-manager.sh:*)",
      "Bash(ps:*)",
      "Bash(./scripts/state-integrity-manager.sh:*)",
      "Bash(./scripts/config-backup-manager.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/error-handling-library.sh)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-startup.sh test:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-simplified-memory-optimized.sh load:*)",
      "Bash(time:*)",
      "Bash(PYTHONPATH=/home/nullrunner/claude-workspace/scripts python3 performance-benchmark.py quick)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-simplified-memory.sh:*)",
      "Bash(./scripts/test-json-locking.sh:*)",
      "Bash(./scripts/claude-safe-process.sh:*)",
      "Bash(./scripts/claude-sync-smart.sh:*)",
      "Bash(./scripts/claude-project-enhanced.sh status:*)",
      "Bash(./scripts/claude-memory-simplified.sh status:*)",
      "Bash(./scripts/claude-memory-simplified.sh:*)",
      "Bash(./scripts/claude-project-enhanced.sh:*)",
      "Bash(./scripts/claude-intelligence-enhanced.sh:*)",
      "Bash(./test-project-json.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-project-enhanced.sh status:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-project-enhanced.sh:*)",
      "Bash(./scripts/test-simplified-system.sh:*)",
      "Bash(./scripts/claude-startup-simple.sh status:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/claude-migrate.sh:*)",
      "Bash(./scripts/test-simplified-full.sh:*)",
      "Bash(/home/nullrunner/claude-workspace/scripts/test-migration-readiness.sh:*)"
    ],
    "deny": []
  }
}