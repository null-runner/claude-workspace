#!/bin/bash
# Claude Exit - Graceful exit con smart-sync automatico
# Usa questo comando invece di 'exit' per avere graceful exit automatico

WORKSPACE_DIR="$HOME/claude-workspace"

# Colori
CYAN='\033[0;36m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

echo -e "${CYAN}ü™ù Claude Exit - avvio graceful exit...${NC}"
echo ""

# Cambia alla directory workspace se non ci siamo gi√†
if [[ "$(pwd)" != "$WORKSPACE_DIR" ]]; then
    cd "$WORKSPACE_DIR" 2>/dev/null || {
        echo -e "${RED}‚ùå Errore: impossibile accedere a $WORKSPACE_DIR${NC}"
        echo -e "${YELLOW}üí° Proseguo con exit normale...${NC}"
        exit "$@"
    }
fi

# Controlla se lo script smart-exit esiste
if [[ ! -f "$WORKSPACE_DIR/scripts/claude-smart-exit.sh" ]]; then
    echo -e "${RED}‚ùå Smart-exit script non trovato${NC}"
    echo -e "${YELLOW}üí° Proseguo con exit normale...${NC}"
    exit "$@"
fi

# Esegui smart exit con modalit√† automatica
echo -e "${BLUE}üöÄ Executing smart exit...${NC}"
"$WORKSPACE_DIR/scripts/claude-smart-exit.sh" --auto

# Se arriviamo qui, smart-exit ha completato - ora FORZA l'exit
echo -e "${GREEN}‚úÖ Graceful exit completato - FORZANDO terminazione Claude Code...${NC}"

# CLEANUP: Termina smart-sync daemon se attivo
echo -e "${CYAN}üßπ Cleaning up smart-sync daemon...${NC}"
SYNC_PID_FILE="$WORKSPACE_DIR/.claude/sync/smart-sync.pid"
if [[ -f "$SYNC_PID_FILE" ]]; then
    SYNC_PID=$(cat "$SYNC_PID_FILE")
    if [[ -n "$SYNC_PID" ]] && kill -0 "$SYNC_PID" 2>/dev/null; then
        echo -e "${CYAN}üõë Stopping smart-sync daemon (PID: $SYNC_PID)...${NC}"
        kill -TERM "$SYNC_PID" 2>/dev/null
        sleep 1
        if kill -0 "$SYNC_PID" 2>/dev/null; then
            kill -KILL "$SYNC_PID" 2>/dev/null
        fi
        echo -e "${GREEN}‚úÖ Smart-sync daemon stopped${NC}"
    fi
    rm -f "$SYNC_PID_FILE"
fi
echo ""

# STRATEGIA ULTRA-AGGRESSIVA per exit garantito
echo -e "${BLUE}üéØ Analizzando processi...${NC}"

# Trova Claude con precisione
CLAUDE_PID=$(ps -eo pid,cmd | awk '$2 == "claude" {print $1}' | head -1)

if [[ -n "$CLAUDE_PID" ]]; then
    echo -e "${BLUE}üéØ Trovato Claude PID: $CLAUDE_PID${NC}"
    
    # Verifica se Claude √® process group leader
    CLAUDE_PGID=$(ps -o pgid= -p "$CLAUDE_PID" 2>/dev/null | tr -d ' ')
    echo -e "${CYAN}üìã Process Group ID: $CLAUDE_PGID${NC}"
    
    # METODO 1: Kill intelligente - group o singolo processo
    if [[ -n "$CLAUDE_PGID" && "$CLAUDE_PGID" == "$CLAUDE_PID" ]]; then
        echo -e "${CYAN}üî• Claude √® group leader - killing process group...${NC}"
        kill -TERM -"$CLAUDE_PID" 2>/dev/null
    else
        echo -e "${CYAN}üî• Claude √® processo singolo - killing process...${NC}"
        kill -TERM "$CLAUDE_PID" 2>/dev/null
    fi
    sleep 0.3
    
    # METODO 2: Se ancora vivo, kill SIGKILL appropriato  
    if kill -0 "$CLAUDE_PID" 2>/dev/null; then
        if [[ -n "$CLAUDE_PGID" && "$CLAUDE_PGID" == "$CLAUDE_PID" ]]; then
            echo -e "${YELLOW}üíÄ Process group resist - usando SIGKILL su group...${NC}"
            kill -KILL -"$CLAUDE_PID" 2>/dev/null
        else
            echo -e "${YELLOW}üíÄ Process resist - usando SIGKILL...${NC}"
            kill -KILL "$CLAUDE_PID" 2>/dev/null
        fi
        sleep 0.3
    fi
    
    # METODO 3: Kill diretto se ancora resiste
    if kill -0 "$CLAUDE_PID" 2>/dev/null; then
        echo -e "${RED}üî• Kill diretto processo principale...${NC}"
        kill -KILL "$CLAUDE_PID" 2>/dev/null
        sleep 0.2
    fi
    
    # METODO 4: Nuklea tutti i processi claude
    echo -e "${RED}‚ò¢Ô∏è  Nuking all claude processes...${NC}"
    pkill -KILL -f "claude" 2>/dev/null
    
else
    echo -e "${YELLOW}‚ö†Ô∏è  Claude PID non trovato - exit diretto${NC}"
fi

# METODO FINALE: Exec exit per sostituire completamente il processo
echo -e "${BLUE}üöÄ EXEC EXIT - bye bye!${NC}"
exec bash -c "echo 'Process terminated successfully'; exit ${1:-0}"
