#!/bin/bash
# Claude Exit - Graceful exit con smart-sync automatico  
# Usa questo comando invece di 'exit' per avere graceful exit automatico

set -euo pipefail  # Strict error handling

# Environment validation
WORKSPACE_DIR="${WORKSPACE_DIR:-$HOME/claude-workspace}"

# Source error handling library
if [[ -f "$WORKSPACE_DIR/scripts/error-handling-library.sh" ]]; then
    source "$WORKSPACE_DIR/scripts/error-handling-library.sh"
else
    echo "ERROR: error-handling-library.sh not found" >&2
    exit 3
fi

# Setup cleanup trap
cleanup_cexit() {
    error_log "INFO" "Claude Exit cleanup called"
}
setup_cleanup_trap cleanup_cexit

# Validate environment
validate_environment "HOME" "WORKSPACE_DIR" || exit $?

echo -e "${SUCCESS_GREEN}ü™ù Claude Exit - avvio graceful exit...${NC}"
echo ""

# Change to workspace directory safely
if ! safe_cd "$WORKSPACE_DIR" "workspace directory"; then
    error_log "ERROR" "Cannot access workspace directory: $WORKSPACE_DIR"
    echo -e "${ERROR_RED}‚ùå Errore: impossibile accedere a $WORKSPACE_DIR${NC}"
    echo -e "${WARNING_YELLOW}üí° Proseguo con exit normale...${NC}"
    exit "${1:-1}"
fi

# Execute smart exit with proper error handling
smart_exit_script="$WORKSPACE_DIR/scripts/claude-smart-exit.sh"
if ! validate_file "$smart_exit_script" "smart exit script" true; then
    error_log "ERROR" "Smart-exit script not found"
    echo -e "${ERROR_RED}‚ùå Smart-exit script non trovato${NC}" 
    echo -e "${WARNING_YELLOW}üí° Proseguo con exit normale...${NC}"
    exit "${1:-1}"
fi

# Execute smart exit with timeout
echo -e "${INFO_BLUE}üöÄ Executing smart exit...${NC}"
if safe_execute_script "$smart_exit_script" "smart exit" 120 --auto; then
    error_log "SUCCESS" "Smart exit completed successfully"
    # Smart exit should terminate process, if we reach here it's an error
    error_log "WARN" "Smart exit returned without terminating session"
else
    error_log "ERROR" "Smart exit failed"
    echo -e "${WARNING_YELLOW}‚ö†Ô∏è  Smart exit failed - fallback a exit normale${NC}"
fi

# Fallback exit
error_log "INFO" "Performing fallback exit"
exit "${1:-0}"
